{"version":3,"sources":["app/components/App.js","app/components/Create.js","app/components/Nav.js","app/components/Sign.js","app/initialize.js"],"names":["App","Home","Component","Create","state","data","testnet","tokenType","tokenCode","copied","handleChange","bind","setTokenType","setTestnet","generateURL","setState","type","event","target","name","value","e","s","btoa","JSON","stringify","link","location","protocol","host","preventDefault","console","log","title","logoUrl","message","company","companyUrl","account","length","trustAmount","onCopy","Nav","base_reserve","min_reserve","Sign","props","agree","c","accountConfirmed","parse","atob","match","params","id","server","StellarSdk","Network","useTestNetwork","Server","usePublicNetwork","getServer","signerAccountPrivateKey","receiverKeys","self","Keypair","fromSecret","loadAccount","publicKey","then","receiver","entriesTrustlines","balances","entriesOffers","Object","keys","offers","entriesOthers","subentry_count","min_fee","toFixed","forEach","asset","asset_type","balance","catch","err","replace","issuerKey","Asset","transaction","TransactionBuilder","addOperation","Operation","changeTrust","limit","build","sign","submitTransaction","error","handleSubmit","handleStellarAccountBlur","accountNote","document","addEventListener","render","querySelector"],"mappings":"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","file":"public/app.js","sourcesContent":["import React from 'react';\nimport Nav from './Nav';\nimport Create from './Create';\nimport Sign from './Sign';\n\nimport {\n  Route,\n  Link,\n  Switch\n} from 'react-router-dom'\n\nimport {Grid} from 'react-uikit3';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div>\n\n        <Nav />\n\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/create\" component={Create}/>\n          <Route path=\"/:id\" component={Sign}/>\n        </Switch>\n\n        <footer className=\"uk-padding uk-margin-top uk-text-center\">\n            <a href=\"https://github.com/trustlane/app\" className=\"uk-icon-link\" target=\"_blank\">\n              <svg width=\"80\" height=\"80\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\" data-ratio=\"1\"> <path d=\"M10,1 C5.03,1 1,5.03 1,10 C1,13.98 3.58,17.35 7.16,18.54 C7.61,18.62 7.77,18.34 7.77,18.11 C7.77,17.9 7.76,17.33 7.76,16.58 C5.26,17.12 4.73,15.37 4.73,15.37 C4.32,14.33 3.73,14.05 3.73,14.05 C2.91,13.5 3.79,13.5 3.79,13.5 C4.69,13.56 5.17,14.43 5.17,14.43 C5.97,15.8 7.28,15.41 7.79,15.18 C7.87,14.6 8.1,14.2 8.36,13.98 C6.36,13.75 4.26,12.98 4.26,9.53 C4.26,8.55 4.61,7.74 5.19,7.11 C5.1,6.88 4.79,5.97 5.28,4.73 C5.28,4.73 6.04,4.49 7.75,5.65 C8.47,5.45 9.24,5.35 10,5.35 C10.76,5.35 11.53,5.45 12.25,5.65 C13.97,4.48 14.72,4.73 14.72,4.73 C15.21,5.97 14.9,6.88 14.81,7.11 C15.39,7.74 15.73,8.54 15.73,9.53 C15.73,12.99 13.63,13.75 11.62,13.97 C11.94,14.25 12.23,14.8 12.23,15.64 C12.23,16.84 12.22,17.81 12.22,18.11 C12.22,18.35 12.38,18.63 12.84,18.54 C16.42,17.35 19,13.98 19,10 C19,5.03 14.97,1 10,1 L10,1 Z\" fill=\"#FFF\"></path></svg>\n            </a>\n\n            <h6 className=\"donate\">Donate: <b>GBFLQVHFHI4OKNBGWB4BU7NWPJDJ7X5ULGFN2UTUI6DRB53HRC3ZGIWA</b></h6>\n        </footer>\n\n      </div>\n    );\n  }\n}\n\nconst Home = () => (\n  <Grid className=\"uk-flex-center uk-cover-container hero-image\">\n    <div class=\"uk-position-center uk-overlay\">\n      <div className='uk-width-2-3@m uk-padding uk-light uk-text-center uk-position-center'>\n        <h2>About <strong>Trustlane</strong>.me</h2>\n        <p>Simple <u><a href=\"http://stellar.org\" target=\"_blank\">Stellar</a></u> Trust generator app. Issuers quickly generate their custom token form (no Issuer private key needed). Issuers then share the unique URL with their prospective customers who sign the trust from for the new token.</p>\n\n        <p>\n          <Link to=\"/create\" className=\"uk-button uk-button-primary uk-margin-small-right\">Create a Trust Form</Link>\n          <Link to=\"https://github.com/trustlane/app\" className=\"uk-button uk-button-default\" target=\"_blank\">GitHub</Link>\n        </p>\n\n      </div>\n    </div>\n  </Grid>\n)\n","import React from 'react';\n\nimport {Grid} from 'react-uikit3';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport NumberFormat from 'react-number-format';\n\nexport default class Create extends React.Component {\n\n  constructor() {\n\n    super()\n\n    this.state = {\n      data: {\n        testnet: false,\n        tokenType: 'ALPHA4',\n        tokenCode: '',\n        copied: false\n      }\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.setTokenType = this.setTokenType.bind(this);\n    this.setTestnet = this.setTestnet.bind(this);\n    this.generateURL = this.generateURL.bind(this);\n\n    // title: \"\",\n    // transactionMemo: \"\",\n    // sourceAccount: \"\",\n    // tokenCode: \"\",\n    // tokenCodeLong: \"\",\n    // tokenDescription: \"\",\n    // url: \"\",\n    // amount: 0,\n    // network: \"public\",\n  }\n\n  setTestnet(state) {\n    var data = this.state.data;\n    data.testnet = state;\n    this.setState(data)\n  }\n\n  setTokenType(type) {\n    var data = this.state.data\n    data.tokenType = type\n    this.setState(data)\n  }\n\n  handleChange(event) {\n    var data = this.state.data\n    data[event.target.name] = event.target.value\n    this.setState(data)\n  }\n\n  generateURL(e) {\n    var s = btoa(JSON.stringify(this.state.data))\n    this.setState({ link: location.protocol + '//' + location.host + \"/\" + s })\n    e.preventDefault()\n  }\n\n  onCopy() {\n    console.log(\"Copied!\")\n  }\n\n  render() {\n    return (\n      <Grid className=\"uk-child-width-1-2@m uk-flex-center uk-padding\">\n        <div className='uk-padding uk-light'>\n          <h2><b>Create</b> <small>new Token Trust Form</small></h2>\n\n          <h4>Instructions</h4>\n\n          <ol>\n            <li>Populate the form</li>\n            <li>Copy your unique URL</li>\n            <li>Share with your end users</li>\n            <li>Donate</li>\n          </ol>\n\n          <form onChange={this.handleChange} onSubmit={this.generateURL} method=\"POST\">\n              <fieldset className=\"uk-fieldset\">\n\n                  <h3>Form Page Info</h3>\n\n                  <div className=\"uk-margin-bottom\">\n                      <input className=\"uk-input\" type=\"text\" placeholder=\"Title\" name=\"title\" value={this.state.data.title} />\n                  </div>\n\n                  <div className=\"uk-margin-bottom\">\n                      <input className=\"uk-input\" type=\"text\" placeholder=\"Logo URL\" name=\"logoUrl\" value={this.state.data.logoUrl} />\n                  </div>\n\n                  <div className=\"uk-margin-bottom\">\n                      <input className=\"uk-input\" type=\"text\" placeholder=\"Message\" name=\"message\" value={this.state.data.message} />\n                  </div>\n\n                  <div className=\"uk-margin-bottom\">\n                      <input className=\"uk-input\" type=\"text\" placeholder=\"Company\" name=\"company\" value={this.state.data.company} />\n                  </div>\n\n                  <div className=\"uk-margin-bottom\">\n                      <input className=\"uk-input\" type=\"text\" placeholder=\"http://..\" name=\"companyUrl\" value={this.state.data.companyUrl} />\n                  </div>\n\n                  <h3>Asset Info</h3>\n\n                  <Grid className=\"uk-button-group uk-margin-bottom uk-child-width-1-2@m\">\n                    <div>\n                      <a className={ 'uk-button uk-width-1-1 ' + (!this.state.data.testnet ? 'uk-button-default' : '')} onClick={() => this.setTestnet(false)}>Public</a>\n                    </div>\n                    <div>\n                      <a className={ 'uk-button uk-width-1-1 ' + (this.state.data.testnet ? 'uk-button-default' : '')} onClick={() => this.setTestnet(true)}>Testnet</a>\n                    </div>\n                  </Grid>\n\n                  <div className=\"uk-margin-bottom\">\n                      <input className=\"uk-input\" type=\"text\" placeholder=\"Account\" name=\"account\" value={this.state.data.account} />\n                  </div>\n\n\n                  <Grid className=\"uk-button-group uk-margin-bottom uk-child-width-1-2@m\">\n                    <div>\n                      <span className={ 'uk-button uk-width-1-1 ' + (this.state.data.tokenCode.length <5 ? 'uk-button-default' : '')} >Alphanumeric 4</span>\n                    </div>\n                    <div>\n                      <span className={ 'uk-button uk-width-1-1 ' + (this.state.data.tokenCode.length >4 ? 'uk-button-default' : '')} >Alphanumeric 12</span>\n                    </div>\n                  </Grid>\n\n                  <div className=\"uk-margin-bottom\">\n                      <input className=\"uk-input\" type=\"text\" placeholder=\"Token Code\" name=\"tokenCode\" value={this.state.data.tokenCode} />\n                  </div>\n\n                  <div className=\"uk-margin-bottom\">\n                      <NumberFormat thousandSeparator={true} className=\"uk-input\" type=\"text\" placeholder=\"Trust Amount\" name=\"trustAmount\" value={this.state.data.trustAmount} />\n                  </div>\n\n                  {/* <div className=\"uk-margin\">\n                      <select className=\"uk-select\">\n                          <option>Option 01</option>\n                          <option>Option 02</option>\n                      </select>\n                  </div>\n\n                  <div className=\"uk-margin\">\n                      <textarea className=\"uk-textarea\" rows=\"5\" placeholder=\"Textarea\"></textarea>\n                  </div>\n\n                  <div className=\"uk-margin uk-grid-small uk-child-width-auto uk-grid\">\n                      <label><input className=\"uk-radio\" type=\"radio\" name=\"radio2\" checked /> A</label>\n                      <label><input className=\"uk-radio\" type=\"radio\" name=\"radio2\" /> B</label>\n                  </div>\n\n                  <div className=\"uk-margin uk-grid-small uk-child-width-auto uk-grid\">\n                      <label><input className=\"uk-checkbox\" type=\"checkbox\" checked /> A</label>\n                      <label><input className=\"uk-checkbox\" type=\"checkbox\" /> B</label>\n                  </div>\n\n                  <div className=\"uk-margin\">\n                      <input className=\"uk-range\" type=\"range\" value=\"2\" min=\"0\" max=\"10\" step=\"0.1\" />\n                  </div> */}\n\n                  <div className=\"uk-margin-bottom\">\n                    <button className=\"uk-button uk-button-primary uk-button-large uk-width-1-1\"><b>Generate Unique URL</b></button>\n                  </div>\n\n              </fieldset>\n          </form>\n\n          { this.state.link && (\n            <div className=\"uk-margin\">\n              <div className=\"uk-inline copy-field\">\n                  <CopyToClipboard onCopy={this.onCopy} text={this.state.link} className=\"uk-form-icon uk-form-icon-flip uk-form-icon-clickable\" >\n                    <span><i className=\"material-icons\">&#xE14D;</i></span>\n                  </CopyToClipboard>\n                  <input className=\"uk-input uk-width-1-1\" type=\"text\" placeholder=\"Your unique URL\" value={this.state.link} disabled />\n              </div>\n            </div>\n          )}\n\n          {/* <div className=\"uk-margin uk-margin-top\">\n            <Grid className=\"uk-alert-transparent uk-padding-small\">\n              <div className=\"uk-width-2-2\">\n                <input className=\"uk-input\" type=\"text\" placeholder=\"Your unique URL\" value={this.state.link} disabled />\n              </div>\n              <div className=\"uk-width-1-2\">\n                <CopyToClipboard onCopy={this.onCopy} text={this.state.link}>\n                  <button className=\"uk-button uk-button-default>Copy to Clipboard</button>\n                </CopyToClipboard>\n              </div>\n            </Grid>\n          </div> */}\n\n        </div>\n      </Grid>\n    )\n  }\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom'\n\nimport {NavBar} from 'react-uikit3';\nimport {Sticky} from 'react-uikit3';\n\nexport default class Nav extends React.Component {\n  render() {\n    return (\n      <Sticky>\n        <NavBar>\n          <div className=\"uk-navbar-left uk-margin-left\">\n            <Link to=\"/\" className=\"uk-navbar-item uk-logo\"><b>Trustlane</b>.me</Link>\n          </div>\n          <div className='uk-navbar-right uk-margin-right'>\n            <ul className='uk-navbar-nav'>\n              <li><Link to=\"/\">About</Link></li>\n              <li><Link to=\"/create\">Create</Link></li>\n              <li><a href=\"https://github.com/trustlane/app\" target=\"_blank\"><svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\" data-ratio=\"1\"> <path d=\"M10,1 C5.03,1 1,5.03 1,10 C1,13.98 3.58,17.35 7.16,18.54 C7.61,18.62 7.77,18.34 7.77,18.11 C7.77,17.9 7.76,17.33 7.76,16.58 C5.26,17.12 4.73,15.37 4.73,15.37 C4.32,14.33 3.73,14.05 3.73,14.05 C2.91,13.5 3.79,13.5 3.79,13.5 C4.69,13.56 5.17,14.43 5.17,14.43 C5.97,15.8 7.28,15.41 7.79,15.18 C7.87,14.6 8.1,14.2 8.36,13.98 C6.36,13.75 4.26,12.98 4.26,9.53 C4.26,8.55 4.61,7.74 5.19,7.11 C5.1,6.88 4.79,5.97 5.28,4.73 C5.28,4.73 6.04,4.49 7.75,5.65 C8.47,5.45 9.24,5.35 10,5.35 C10.76,5.35 11.53,5.45 12.25,5.65 C13.97,4.48 14.72,4.73 14.72,4.73 C15.21,5.97 14.9,6.88 14.81,7.11 C15.39,7.74 15.73,8.54 15.73,9.53 C15.73,12.99 13.63,13.75 11.62,13.97 C11.94,14.25 12.23,14.8 12.23,15.64 C12.23,16.84 12.22,17.81 12.22,18.11 C12.22,18.35 12.38,18.63 12.84,18.54 C16.42,17.35 19,13.98 19,10 C19,5.03 14.97,1 10,1 L10,1 Z\"></path></svg></a></li>\n            </ul>\n          </div>\n        </NavBar>\n      </Sticky>\n    );\n  }\n}\n","import React from 'react';\n\nimport {Grid} from 'react-uikit3';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport {NumberFormat} from 'react-number-format';\nimport {Link} from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\n\nconst base_reserve = 0.5\n      , min_reserve = base_reserve * 2\n\nexport default class Sign extends React.Component {\n\n  constructor(props) {\n\n    super(props)\n\n    this.state = {\n      data: {\n        agree: false\n      },\n      c: true,\n      accountConfirmed: true\n    }\n\n  }\n\n  componentWillMount() {\n    var data = JSON.parse(atob(this.props.match.params.id));\n    this.setState({ 'data': data })\n  }\n\n  componentHasMounted() {\n    var data = JSON.parse(atob(this.props.match.params.id));\n    this.setState({ 'data': data })\n  }\n\n  handleChange(event) {\n    console.log(event.target.value)\n    var data = this.state.data\n    data[event.target.name] = event.target.value\n    this.setState(data )\n  }\n\n  getServer() {\n    var server = null\n    if(this.state.data.testnet) {\n      StellarSdk.Network.useTestNetwork();\n      server = new StellarSdk.Server('https://horizon-testnet.stellar.org');\n    }\n    else {\n      StellarSdk.Network.usePublicNetwork()\n      server = new StellarSdk.Server('https://horizon.stellar.org');\n    }\n    return server\n  }\n\n  handleStellarAccountBlur() {\n\n    const server = this.getServer()\n\n    if(!!this.state.data.signerAccountPrivateKey) {\n\n      let receiverKeys\n      var self = this\n\n      try {\n      receiverKeys = StellarSdk.Keypair\n            .fromSecret(this.state.data.signerAccountPrivateKey)\n      }\n      catch(e) {\n        self.setState({ 'accountNote': 'Error loading account / Account does not exist'})\n        return false\n      }\n\n      // server.offers().forAccount(receiverKeys.publicKey()).then(function(r) {\n      //   console.log(r);\n      // })\n      // server.operations().forAccount(receiverKeys.publicKey()).then(function(r) {\n      //   console.log(r);\n      // })\n      // server.ledgers().then(function(r) {\n      //   console.log(r);\n      // })\n\n      server.loadAccount(receiverKeys.publicKey())\n        .then(function(receiver) {\n\n          let entriesTrustlines = receiver.balances.length - 1\n          let entriesOffers = Object.keys(receiver.offers).length\n          let entriesOthers = receiver.subentry_count - entriesTrustlines - entriesOffers\n\n          const min_fee = new BigNumber(min_reserve + (entriesTrustlines + entriesOffers + entriesOthers) * base_reserve).toFixed(2);\n\n          receiver.balances.forEach(function(asset) {\n            if(asset.asset_type==\"native\") {\n              const balance = new BigNumber(asset.balance).toFixed(2)\n\n              if(balance > min_fee) {\n                self.setState({ 'accountNote': 'Good to go - you need ' + min_fee + ' XLM and you have ' + balance + \" XLM\" });\n                self.setState({ 'accountConfirmed': true });\n              }\n              else {\n                self.setState({ 'accountNote': 'Error - you need ' + min_fee + ' XLM to trust this token. You only have ' + balance + \" XLM. You need \" + new BigNumber(min_fee - balance).toFixed(2) + \" XLM more.\" });\n              }\n            }\n          });\n\n        }).catch(function (err) {\n          console.log(err)\n          self.setState({ 'accountNote': 'Account does not exist.' });\n        });\n    }\n\n  }\n\n\n  handleSubmit(event) {\n\n    const server = this.getServer()\n    var trustAmount = this.state.data.trustAmount.replace(/\\,/g,'')  || ''\n\n    // Keys for accounts to issue and receive the new asset\n    var issuerKey = this.state.data.account\n    var receiverKeys = StellarSdk.Keypair\n      .fromSecret(this.state.data.signerAccountPrivateKey);\n\n    // Create an object to represent the new asset\n    var asset = new StellarSdk.Asset(this.state.data.tokenCode, issuerKey);\n\n    // First, the receiving account must trust the asset\n    server.loadAccount(receiverKeys.publicKey())\n      .then(function(receiver) {\n        var transaction = new StellarSdk.TransactionBuilder(receiver)\n          // The `changeTrust` operation creates (or alters) a trustline\n          // The `limit` parameter below is optional\n          .addOperation(StellarSdk.Operation.changeTrust({\n            asset: asset,\n            limit: trustAmount\n          }))\n          .build();\n        transaction.sign(receiverKeys);\n        return server.submitTransaction(transaction);\n      })\n      .catch(function(error) {\n        console.error('Error!', error);\n      });\n\n    event.preventDefault()\n\n  }\n\n  render() {\n    return (\n      <Grid className=\"uk-child-width-1-2@m uk-flex-center uk-padding\">\n        <div className='container uk-padding uk-light'>\n          <p className=\"uk-text-right\">Token Trust Form generated by &nbsp;<a href={this.state.data.companyUrl} target=\"_blank\"><strong>{this.state.data.company}</strong></a> | <Link to=\"/create\" className=\"text-primary\">Create yours</Link></p>\n\n          <h2><span className=\"uk-badge uk-padding-small network-badge\">{this.state.data.testnet ? 'Testnet' : 'Public Net'}</span> Trust new token <strong>{this.state.data.tokenCode}</strong></h2>\n\n          { !!this.state.data.title && (<h3><b>{this.state.data.title}</b></h3>) }\n\n          <form onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\n            <fieldset className=\"uk-fieldset\">\n\n              <h4>Overview</h4>\n\n              { !!this.state.data.logoUrl && (<img src={this.state.data.logoUrl} />)}\n\n              { !!this.state.data.message && (<div className=\"uk-margin uk-margin-bottom-large\">\n                <p>{this.state.data.message}</p>\n              </div>)}\n\n              <h4>Token Information</h4>\n\n              <Grid className=\"uk-grid-divider uk-child-width-expand@s uk-margin-bottom\">\n                <div className=\"uk-text-right\">\n                  <label>Token ({(this.state.data.tokenType=='ALPHA12' ? 'Alpha 12' : 'Alpha 4')})</label>\n                  <h3 className=\"uk-margin-remove\"><strong>{this.state.data.tokenCode}</strong></h3>\n                </div>\n                <div>\n                  <label>Trust Limit</label>\n                  <h3 className=\"uk-margin-remove\"><strong>{this.state.data.trustAmount || 'MAX'}</strong></h3>\n                </div>\n              </Grid>\n\n              <hr/>\n\n              <div className=\"uk-margin-bottom uk-text-center\">\n                <label>Issuing Account</label>\n                <br/>\n                <span className=\"code uk-margin-top uk-width-1-1\">{this.state.data.account}</span>\n              </div>\n\n              <h3>Paste Your <u>Private Key</u></h3>\n\n              <div className=\"uk-margin-bottom\">\n                  <input className=\"uk-input code\" type=\"text\" placeholder=\"GC2BKL...\" name=\"signerAccountPrivateKey\" value={this.state.data.signerAccountPrivateKey} onChange={this.handleChange.bind(this)} onBlur={this.handleStellarAccountBlur.bind(this)} />\n              </div>\n\n              { this.state.accountNote && (<span>{this.state.accountNote}</span>) }\n\n              <h5><strong>Security Information:</strong> <em>We never store your Private Key - anywhere. It is used in your browser to sign the transaction with the <a href=\"http://\" className=\"text-primary\">Stellar-JS-SDK</a>. Verify code of the signing component <a className=\"text-primary\">here</a>.</em>\n              </h5>\n\n              <div className=\"uk-margin uk-grid-small uk-child-width-auto uk-grid\">\n                 <label><input className=\"uk-checkbox uk-margin-small-right\" type=\"checkbox\" name=\"agree\" value={this.state.data.agree} onChange={this.handleChange.bind(this)} /> I agree to the terms & conditions.</label>\n             </div>\n\n             <div className=\"uk-margin-bottom\">\n               <button className=\"uk-button uk-button-primary uk-button-large uk-width-1-1\" disabled={(this.state.data.agree!='on' || !this.state.accountConfirmed  )}><b>Assign Trust</b></button>\n             </div>\n\n            </fieldset>\n          </form>\n        </div>\n      </Grid>\n    )\n  }\n\n}\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from 'components/App';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom'\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  ReactDOM.render(<Router><App /></Router>, document.querySelector('#app'));\n});\n"]}