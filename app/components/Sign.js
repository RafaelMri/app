import React from 'react';

import {Grid} from 'react-uikit3';
import {CopyToClipboard} from 'react-copy-to-clipboard';
import {NumberFormat} from 'react-number-format';
import {Link} from 'react-router-dom';

export default class Sign extends React.Component {

  constructor(props) {

    super(props)

    this.state = {
      data: {}
    }

  }

  componentWillMount() {
    var data = JSON.parse(atob(this.props.match.params.id));
    this.setState({ 'data': data })
  }

  componentHasMounted() {
    var data = JSON.parse(atob(this.props.match.params.id));
    this.setState({ 'data': data })
  }

  handleChange(event) {
    var data = this.state.data
    data[event.target.name] = event.target.value
    this.setState({ data  })
  }

  handleSubmit(event) {

    var server = null
    var trustAmount = this.state.data.trustAmount.replace(/\,/g,'')  || ''

    if(this.state.data.testnet) {
      StellarSdk.Network.useTestNetwork();
      server = new StellarSdk.Server('https://horizon-testnet.stellar.org');
    }
    else {
      StellarSdk.Network.usePublicNetwork()
      server = new StellarSdk.Server('https://horizon.stellar.org');
    }

    // Keys for accounts to issue and receive the new asset
    var issuerKey = this.state.data.account
    var receiverKeys = StellarSdk.Keypair
      .fromSecret(this.state.data.signerAccountPrivateKey);

    // Create an object to represent the new asset
    var asset = new StellarSdk.Asset(this.state.data.tokenCode, issuerKey);

    // First, the receiving account must trust the asset
    server.loadAccount(receiverKeys.publicKey())
      .then(function(receiver) {
        var transaction = new StellarSdk.TransactionBuilder(receiver)
          // The `changeTrust` operation creates (or alters) a trustline
          // The `limit` parameter below is optional
          .addOperation(StellarSdk.Operation.changeTrust({
            asset: asset,
            limit: trustAmount
          }))
          .build();
        transaction.sign(receiverKeys);
        return server.submitTransaction(transaction);
      })
      .catch(function(error) {
        console.error('Error!', error);
      });

    event.preventDefault()

  }

  render() {
    return (
      <Grid className="uk-child-width-1-2@m uk-flex-center uk-padding">
        <div className='container uk-padding uk-light'>
          <p className="uk-text-right">Token Trust Form generated by &nbsp;<a href={this.state.data.companyUrl} target="_blank"><strong>{this.state.data.company}</strong></a> | <Link to="/create" className="text-primary">Create yours</Link></p>

          <h2><span className="uk-badge uk-padding-small network-badge">{this.state.data.testnet ? 'Testnet' : 'Public Net'}</span> Trust new token <strong>{this.state.data.tokenCode}</strong></h2>

          <form onSubmit={this.handleSubmit.bind(this)} method="POST">
            <fieldset className="uk-fieldset">

              <h3>Overview</h3>

              <img src={this.state.data.logoUrl} />

              <div className="uk-margin uk-margin-bottom-large">
                <p>{this.state.data.message}</p>
              </div>

              <h3>Token Information</h3>

              <Grid className="uk-grid-divider uk-child-width-expand@s uk-margin-bottom">
                <div className="uk-text-right">
                  <label>Token ({(this.state.data.tokenType=='ALPHA12' ? 'Alpha 12' : 'Alpha 4')})</label>
                  <h3 className="uk-margin-remove"><strong>{this.state.data.tokenCode}</strong></h3>
                </div>
                <div>
                  <label>Trust Limit</label>
                  <h3 className="uk-margin-remove"><strong>{this.state.data.trustAmount}</strong></h3>
                </div>
              </Grid>

              <hr/>

              <div className="uk-margin-bottom uk-text-center">
                <label>Issuing Account</label>
                <br/>
                <span className="code uk-margin-top uk-width-1-1">{this.state.data.stellarAccount}</span>
              </div>

              {/* <div className="uk-margin">

                <input className="uk-input uk-width-1-1" type="text" placeholder="Token Code" name="tokenCode" value={this.state.tokenCode} />
              <Grid className="uk-grid-small uk-margin-bottom">
                <div className="uk-width-1-3">

                </div>
                <div className="uk-width-2-3">

                </div>
              </Grid> */}

              <h3>Paste Your <u>Private Key</u></h3>

              <div className="uk-margin-bottom">
                  <input className="uk-input code" type="text" placeholder="GC2BKL..." name="signerAccountPrivateKey" value={this.state.data.signerAccountPrivateKey} onChange={this.handleChange.bind(this)} />
              </div>

              <h5><strong>Security Information:</strong> <em>We never store your Private Key - anywhere. It is used in your browser to sign the transaction with the <a href="http://" className="text-primary">Stellar-JS-SDK</a>. Verify code of the sign component <a className="text-primary">here</a>.</em>
              </h5>

              <div className="uk-margin uk-grid-small uk-child-width-auto uk-grid">
                 <label><input className="uk-checkbox uk-margin-small-right" type="checkbox" /> I agree to the terms & conditions.</label>
             </div>

             <div className="uk-margin-bottom">
               <button className="uk-button uk-button-primary uk-button-large uk-width-1-1"><b>Assign Trust</b></button>
             </div>

            </fieldset>
          </form>
        </div>
      </Grid>
    )
  }

}
