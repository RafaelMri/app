import React from 'react';

import {Grid} from 'react-uikit3';
import {CopyToClipboard} from 'react-copy-to-clipboard';
import {NumberFormat} from 'react-number-format';
import {Link} from 'react-router-dom';
import BigNumber from 'bignumber.js';

const base_reserve = 0.5
      , min_reserve = base_reserve * 2

export default class Sign extends React.Component {

  constructor(props) {

    super(props)

    this.state = {
      data: {
        agree: false
      },
      c: true,
      accountConfirmed: true
    }

  }

  componentWillMount() {
    var data = JSON.parse(atob(this.props.match.params.id));
    this.setState({ 'data': data })
  }

  componentHasMounted() {
    var data = JSON.parse(atob(this.props.match.params.id));
    this.setState({ 'data': data })
  }

  handleChange(event) {
    console.log(event.target.value)
    var data = this.state.data
    data[event.target.name] = event.target.value
    this.setState(data )
  }

  getServer() {
    var server = null
    if(this.state.data.testnet) {
      StellarSdk.Network.useTestNetwork();
      server = new StellarSdk.Server('https://horizon-testnet.stellar.org');
    }
    else {
      StellarSdk.Network.usePublicNetwork()
      server = new StellarSdk.Server('https://horizon.stellar.org');
    }
    return server
  }

  handleStellarAccountBlur() {

    const server = this.getServer()

    if(!!this.state.data.signerAccountPrivateKey) {

      let receiverKeys
      var self = this

      try {
      receiverKeys = StellarSdk.Keypair
            .fromSecret(this.state.data.signerAccountPrivateKey)
      }
      catch(e) {
        self.setState({ 'accountNote': 'Error loading account / Account does not exist'})
        return false
      }

      // server.offers().forAccount(receiverKeys.publicKey()).then(function(r) {
      //   console.log(r);
      // })
      // server.operations().forAccount(receiverKeys.publicKey()).then(function(r) {
      //   console.log(r);
      // })
      // server.ledgers().then(function(r) {
      //   console.log(r);
      // })

      server.loadAccount(receiverKeys.publicKey())
        .then(function(receiver) {

          let entriesTrustlines = receiver.balances.length - 1
          let entriesOffers = Object.keys(receiver.offers).length
          let entriesOthers = receiver.subentry_count - entriesTrustlines - entriesOffers

          const min_fee = new BigNumber(min_reserve + (entriesTrustlines + entriesOffers + entriesOthers) * base_reserve).toFixed(2);

          receiver.balances.forEach(function(asset) {
            if(asset.asset_type=="native") {
              const balance = new BigNumber(asset.balance).toFixed(2)

              if(balance > min_fee) {
                self.setState({ 'accountNote': 'Good to go - you need ' + min_fee + ' XLM and you have ' + balance + " XLM" });
                self.setState({ 'accountConfirmed': true });
              }
              else {
                self.setState({ 'accountNote': 'Error - you need ' + min_fee + ' XLM to trust this token. You only have ' + balance + " XLM. You need " + new BigNumber(min_fee - balance).toFixed(2) + " XLM more." });
              }
            }
          });

        }).catch(function (err) {
          console.log(err)
          self.setState({ 'accountNote': 'Account does not exist.' });
        });
    }

  }


  handleSubmit(event) {

    const server = this.getServer()
    var trustAmount = this.state.data.trustAmount.replace(/\,/g,'')  || ''

    // Keys for accounts to issue and receive the new asset
    var issuerKey = this.state.data.account
    var receiverKeys = StellarSdk.Keypair
      .fromSecret(this.state.data.signerAccountPrivateKey);

    // Create an object to represent the new asset
    var asset = new StellarSdk.Asset(this.state.data.tokenCode, issuerKey);

    // First, the receiving account must trust the asset
    server.loadAccount(receiverKeys.publicKey())
      .then(function(receiver) {
        var transaction = new StellarSdk.TransactionBuilder(receiver)
          // The `changeTrust` operation creates (or alters) a trustline
          // The `limit` parameter below is optional
          .addOperation(StellarSdk.Operation.changeTrust({
            asset: asset,
            limit: trustAmount
          }))
          .build();
        transaction.sign(receiverKeys);
        return server.submitTransaction(transaction);
      })
      .catch(function(error) {
        console.error('Error!', error);
      });

    event.preventDefault()

  }

  render() {
    return (
      <Grid className="uk-child-width-1-2@m uk-flex-center uk-padding">
        <div className='container uk-padding uk-light'>
          <p className="uk-text-right">Token Trust Form generated by &nbsp;<a href={this.state.data.companyUrl} target="_blank"><strong>{this.state.data.company}</strong></a> | <Link to="/create" className="text-primary">Create yours</Link></p>

          <h2><span className="uk-badge uk-padding-small network-badge">{this.state.data.testnet ? 'Testnet' : 'Public Net'}</span> Trust new token <strong>{this.state.data.tokenCode}</strong></h2>

          { !!this.state.data.title && (<h3><b>{this.state.data.title}</b></h3>) }

          <form onSubmit={this.handleSubmit.bind(this)} method="POST">
            <fieldset className="uk-fieldset">

              <h4>Overview</h4>

              { !!this.state.data.logoUrl && (<img src={this.state.data.logoUrl} />)}

              { !!this.state.data.message && (<div className="uk-margin uk-margin-bottom-large">
                <p>{this.state.data.message}</p>
              </div>)}

              <h4>Token Information</h4>

              <Grid className="uk-grid-divider uk-child-width-expand@s uk-margin-bottom">
                <div className="uk-text-right">
                  <label>Token ({(this.state.data.tokenType=='ALPHA12' ? 'Alpha 12' : 'Alpha 4')})</label>
                  <h3 className="uk-margin-remove"><strong>{this.state.data.tokenCode}</strong></h3>
                </div>
                <div>
                  <label>Trust Limit</label>
                  <h3 className="uk-margin-remove"><strong>{this.state.data.trustAmount || 'MAX'}</strong></h3>
                </div>
              </Grid>

              <hr/>

              <div className="uk-margin-bottom uk-text-center">
                <label>Issuing Account</label>
                <br/>
                <span className="code uk-margin-top uk-width-1-1">{this.state.data.account}</span>
              </div>

              <h3>Paste Your <u>Private Key</u></h3>

              <div className="uk-margin-bottom">
                  <input className="uk-input code" type="text" placeholder="GC2BKL..." name="signerAccountPrivateKey" value={this.state.data.signerAccountPrivateKey} onChange={this.handleChange.bind(this)} onBlur={this.handleStellarAccountBlur.bind(this)} />
              </div>

              { this.state.accountNote && (<span>{this.state.accountNote}</span>) }

              <h5><strong>Security Information:</strong> <em>We never store your Private Key - anywhere. It is used in your browser to sign the transaction with the <a href="https://github.com/stellar/js-stellar-sdk" className="text-primary" target="_blank">Stellar-JS-SDK</a>. Verify code of the signing component <a className="text-primary" href="https://github.com/trustlane/app/blob/master/app/components/Sign.js" target="_blank">here</a>.</em>
              </h5>

              <div className="uk-margin uk-grid-small uk-child-width-auto uk-grid">
                 <label><input className="uk-checkbox uk-margin-small-right" type="checkbox" name="agree" value={this.state.data.agree} onChange={this.handleChange.bind(this)} /> I agree to the terms & conditions.</label>
             </div>

             <div className="uk-margin-bottom">
               <button className="uk-button uk-button-primary uk-button-large uk-width-1-1" disabled={(this.state.data.agree!='on' || !this.state.accountConfirmed  )}><b>Assign Trust</b></button>
             </div>

            </fieldset>
          </form>
        </div>
      </Grid>
    )
  }

}
